{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","titel","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64c90de2.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react';\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({titel,cases,active,isRed,total, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${ isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                {/* title*/}\r\n                <Typography  className=\"infBox_title\" color=\"textSecondary\">\r\n                    {titel}\r\n                </Typography>\r\n               \r\n                {/* number of cases*/}\r\n                <h2 className=\"infobox_cases\">{cases}</h2>\r\n                {/* total*/}\r\n                <Typography   className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n   \r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n   \r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    \r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) =>  {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react';\r\nimport { Map as LeafletMap,TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap }  from \"./util\";\r\n\r\nfunction Map({countries, casesType,center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n        <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy;<a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {/* loop through country draw circle*/ }\r\n            {showDataOnMap(countries,casesType)}\r\n        </LeafletMap>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        {countries.map(({country,cases}) =>(\r\n        <tr>\r\n            <td>{country}</td>\r\n            <td><strong>{cases}</strong></td>\r\n        </tr>\r\n\r\n            \r\n        ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React,{ useState,useEffect } from 'react'\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options ={\r\n    legend:{\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips:{\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[{\r\n            type: \"time\",\r\n            time: {\r\n                format:\"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n            },\r\n        },\r\n    ],\r\n    yAxes: [{\r\n        gridLines: {\r\n            display: false,\r\n        },\r\n        ticks: {\r\n            //inculde a doller sign in the ticks\r\n            callback: function(value,index,values){\r\n                return numeral(value).format(\"0a\");\r\n            },\r\n        },\r\n    },\r\n],\r\n    },\r\n\r\n}\r\nconst buildChartData = ( data,casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for(let date in data.cases){\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType] [date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n           \r\n        }\r\n        lastDataPoint = data[casesType] [date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\n \r\nfunction LineGraph() {\r\n    const [data,setData] = useState({});\r\n\r\n    \r\n\r\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n    //\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n            await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n               return response.json();\r\n        })\r\n            .then((data) => {\r\n                // clver staff her\r\n               \r\n                let chartData = buildChartData(data,\"cases\");\r\n                setData(chartData);\r\n            })\r\n\r\n        }\r\n        fetchData();\r\n       \r\n\r\n    }, [])\r\n    \r\n    return (\r\n        <div>\r\n           <h1>Line of the graph</h1>\r\n           {data?.length >0  && (\r\n            <Line \r\n           options={options}\r\n           data={{\r\n               datasets:[\r\n                   {\r\n                   backgroundColor: \"rgba(204,16,52,0.4)\",\r\n                   borderColor: \"#CC1034\",\r\n                   data:data,\r\n               },\r\n               ],\r\n                   \r\n               \r\n           }} />\r\n\r\n           )}\r\n          \r\n               \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import { FormControl, MenuItem, Select ,Card, CardContent} from '@material-ui/core';\nimport React,{useState,useEffect} from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\nimport { sortData,prettyPrintStat } from './util';\n\nfunction App() {\n  const [countries,setCountries] = useState([]);\n  const[country,setCountry] = useState('worldwide');\n  const [countryInfo,setCountryInfo]= useState([]);\n  const [tableData,setTableData]= useState([]);\n  const [mapCenter,setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\n  const [mapZoom,setMapZoom] = useState(3);\n  const [mapCountries,setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState([\"cases\"]);\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response =>response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    })\n  }, [])\n  \n  useEffect(()=>{\n    //async-> send the data wait for it do something it \n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries =data.map((country) =>(\n          {\n            name:country.country,//india.uk\n            value:country.countryInfo.iso2, //usa,india,uk\n          \n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n\n      });\n    };\n    getCountriesData();\n\n  },[]);\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  return (\n    <div className=\"app\">\n    <div className=\"app_left\">\n    <div className=\"app_header\">\n    <h1>COVID-19 Live</h1>\n    <FormControl className=\"app_dropdown\">\n    <Select variant=\"outlined\" onChange={onCountryChange}\n    value={country}\n    >\n    <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n   {countries.map((country) => (\n    <MenuItem value={country.value}>{country.name}</MenuItem>\n   ))}\n          </Select>\n\n    </FormControl>\n   \n\n    </div>\n   \n    \n    <div className=\"app_status\">\n    <InfoBox isRed active={casesType === \"cases\"} onClick={e => setCasesType('cases')} titel=\"Coronvirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.todayCases)} />\n    <InfoBox active={casesType === \"recovred\"} onClick={e => setCasesType('recoverd')} titel=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)}  total={prettyPrintStat(countryInfo.todayRecovered)} />\n    <InfoBox isRed active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} titel=\"Deaths\"   cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.todayDeaths)} />\n      {/*Infoboxs  tile=\"Coronvirus cases\"*/}\n      {/*Infoboxs  tile=\"Coronvirus recoveries\"*/}\n      {/*Infoboxs */}\n    </div>\n    {/* map*/}\n    <Map casesType={casesType}\n    countries={mapCountries} center={mapCenter}\n      zoom={mapZoom}\n    />\n    </div>\n    <Card className=\"app_right\">\n    <CardContent>\n    <h3>Live case By Country</h3>\n    <Table countries={tableData}/>\n    <h3>Worldwide new cases {casesType}</h3>\n    <LineGraph casesType={casesType}/>\n     {/*Grap*/}\n     \n\n    </CardContent>\n     \n\n    </Card>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}